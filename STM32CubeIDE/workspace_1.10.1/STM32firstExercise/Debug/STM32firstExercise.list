
STM32firstExercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002104  08002104  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002104  08002104  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002104  08002104  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002108  08002108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800210c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  0800217c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800217c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035a8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001123  00000000  00000000  00023641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  00024768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000420  00000000  00000000  00024c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016858  00000000  00000000  00025050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000570d  00000000  00000000  0003b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dd64  00000000  00000000  00040fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bed19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001514  00000000  00000000  000bed6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002070 	.word	0x08002070

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002070 	.word	0x08002070

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4608      	mov	r0, r1
 8000166:	4611      	mov	r1, r2
 8000168:	461a      	mov	r2, r3
 800016a:	4603      	mov	r3, r0
 800016c:	70fb      	strb	r3, [r7, #3]
 800016e:	460b      	mov	r3, r1
 8000170:	70bb      	strb	r3, [r7, #2]
 8000172:	4613      	mov	r3, r2
 8000174:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	461a      	mov	r2, r3
 8000184:	f107 0308 	add.w	r3, r7, #8
 8000188:	cb03      	ldmia	r3!, {r0, r1}
 800018a:	6010      	str	r0, [r2, #0]
 800018c:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800018e:	2200      	movs	r2, #0
 8000190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000194:	484d      	ldr	r0, [pc, #308]	; (80002cc <begin+0x170>)
 8000196:	f000 febe 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001a0:	484a      	ldr	r0, [pc, #296]	; (80002cc <begin+0x170>)
 80001a2:	f000 feb8 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	4847      	ldr	r0, [pc, #284]	; (80002cc <begin+0x170>)
 80001ae:	f000 feb2 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b8:	4844      	ldr	r0, [pc, #272]	; (80002cc <begin+0x170>)
 80001ba:	f000 feac 	bl	8000f16 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2108      	movs	r1, #8
 80001c2:	4842      	ldr	r0, [pc, #264]	; (80002cc <begin+0x170>)
 80001c4:	f000 fea7 	bl	8000f16 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ce:	4840      	ldr	r0, [pc, #256]	; (80002d0 <begin+0x174>)
 80001d0:	f000 fea1 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,GPIO_PIN_RESET);
	#endif

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001da:	483d      	ldr	r0, [pc, #244]	; (80002d0 <begin+0x174>)
 80001dc:	f000 fe9b 	bl	8000f16 <HAL_GPIO_WritePin>
	#endif

	if (lines > 1) {
 80001e0:	78bb      	ldrb	r3, [r7, #2]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d906      	bls.n	80001f4 <begin+0x98>
		lcd->_displayfunction |= LCD_2LINE;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	78ba      	ldrb	r2, [r7, #2]
 80001f8:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80001fa:	78fa      	ldrb	r2, [r7, #3]
 80001fc:	78fb      	ldrb	r3, [r7, #3]
 80001fe:	3340      	adds	r3, #64	; 0x40
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	4613      	mov	r3, r2
 8000204:	2240      	movs	r2, #64	; 0x40
 8000206:	2100      	movs	r1, #0
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f000 f945 	bl	8000498 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800020e:	787b      	ldrb	r3, [r7, #1]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d009      	beq.n	8000228 <begin+0xcc>
 8000214:	78bb      	ldrb	r3, [r7, #2]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d106      	bne.n	8000228 <begin+0xcc>
		lcd->_displayfunction |= LCD_5x10DOTS;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	b2da      	uxtb	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f000 fbd9 	bl	80009e0 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <begin+0x170>)
 8000234:	f000 fe6f 	bl	8000f16 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023e:	4824      	ldr	r0, [pc, #144]	; (80002d0 <begin+0x174>)
 8000240:	f000 fe69 	bl	8000f16 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800024a:	4821      	ldr	r0, [pc, #132]	; (80002d0 <begin+0x174>)
 800024c:	f000 fe63 	bl	8000f16 <HAL_GPIO_WritePin>
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d014      	beq.n	8000282 <begin+0x126>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8000258:	2003      	movs	r0, #3
 800025a:	f000 f8d1 	bl	8000400 <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 800025e:	2005      	movs	r0, #5
 8000260:	f000 fbbe 	bl	80009e0 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 8000264:	2003      	movs	r0, #3
 8000266:	f000 f8cb 	bl	8000400 <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 800026a:	2005      	movs	r0, #5
 800026c:	f000 fbb8 	bl	80009e0 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8000270:	2003      	movs	r0, #3
 8000272:	f000 f8c5 	bl	8000400 <write4bits>
		HAL_Delay(5);
 8000276:	2005      	movs	r0, #5
 8000278:	f000 fbb2 	bl	80009e0 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 800027c:	2002      	movs	r0, #2
 800027e:	f000 f8bf 	bl	8000400 <write4bits>
		HAL_Delay(1);
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4619      	mov	r1, r3
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f000 f8f2 	bl	8000478 <command>
    HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fba3 	bl	80009e0 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2204      	movs	r2, #4
 800029e:	705a      	strb	r2, [r3, #1]
    display(lcd);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f000 f848 	bl	8000336 <display>

    // Limpa display
    clear(lcd);
 80002a6:	6878      	ldr	r0, [r7, #4]
 80002a8:	f000 f836 	bl	8000318 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2202      	movs	r2, #2
 80002b0:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	789b      	ldrb	r3, [r3, #2]
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f000 f8da 	bl	8000478 <command>
}
 80002c4:	bf00      	nop
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40010800 	.word	0x40010800

080002d4 <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 80002de:	6838      	ldr	r0, [r7, #0]
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 80002e6:	2300      	movs	r3, #0
 80002e8:	73fb      	strb	r3, [r7, #15]
 80002ea:	e00c      	b.n	8000306 <print+0x32>
		write(lcd ,*(value+i));
 80002ec:	7bfb      	ldrb	r3, [r7, #15]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	f993 3000 	ldrsb.w	r3, [r3]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	4619      	mov	r1, r3
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 f833 	bl	8000366 <write>
	for (uint8_t i = 0; i < Lengh; i++){
 8000300:	7bfb      	ldrb	r3, [r7, #15]
 8000302:	3301      	adds	r3, #1
 8000304:	73fb      	strb	r3, [r7, #15]
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	429a      	cmp	r2, r3
 800030c:	d8ee      	bhi.n	80002ec <print+0x18>
	}
}
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8000320:	2101      	movs	r1, #1
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f000 f8a8 	bl	8000478 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8000328:	2002      	movs	r0, #2
 800032a:	f000 fb59 	bl	80009e0 <HAL_Delay>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	785b      	ldrb	r3, [r3, #1]
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	b2da      	uxtb	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4619      	mov	r1, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 f88d 	bl	8000478 <command>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	460b      	mov	r3, r1
 8000370:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 8000372:	78fb      	ldrb	r3, [r7, #3]
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f000 f805 	bl	8000388 <send>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
 8000394:	4613      	mov	r3, r2
 8000396:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8000398:	78bb      	ldrb	r3, [r7, #2]
 800039a:	461a      	mov	r2, r3
 800039c:	2108      	movs	r1, #8
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <send+0x44>)
 80003a0:	f000 fdb9 	bl	8000f16 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <send+0x48>)
 80003ac:	f000 fdb3 	bl	8000f16 <HAL_GPIO_WritePin>
	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
	    write8bits(value);
	  } else {
	#endif
	    write4bits(value>>4);
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	091b      	lsrs	r3, r3, #4
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f822 	bl	8000400 <write4bits>
	    write4bits(value);
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f81e 	bl	8000400 <write4bits>
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	40010800 	.word	0x40010800

080003d4 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003de:	4807      	ldr	r0, [pc, #28]	; (80003fc <pulseEnable+0x28>)
 80003e0:	f000 fd99 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f000 fafb 	bl	80009e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f0:	4802      	ldr	r0, [pc, #8]	; (80003fc <pulseEnable+0x28>)
 80003f2:	f000 fd90 	bl	8000f16 <HAL_GPIO_WritePin>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010800 	.word	0x40010800

08000400 <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0301 	and.w	r3, r3, #1
 8000410:	b2db      	uxtb	r3, r3
 8000412:	461a      	mov	r2, r3
 8000414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000418:	4816      	ldr	r0, [pc, #88]	; (8000474 <write4bits+0x74>)
 800041a:	f000 fd7c 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	085b      	lsrs	r3, r3, #1
 8000422:	b2db      	uxtb	r3, r3
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000430:	4810      	ldr	r0, [pc, #64]	; (8000474 <write4bits+0x74>)
 8000432:	f000 fd70 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	089b      	lsrs	r3, r3, #2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	480a      	ldr	r0, [pc, #40]	; (8000474 <write4bits+0x74>)
 800044a:	f000 fd64 	bl	8000f16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	08db      	lsrs	r3, r3, #3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <write4bits+0x74>)
 8000462:	f000 fd58 	bl	8000f16 <HAL_GPIO_WritePin>

	pulseEnable();
 8000466:	f7ff ffb5 	bl	80003d4 <pulseEnable>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010c00 	.word	0x40010c00

08000478 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2200      	movs	r2, #0
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff ff7c 	bl	8000388 <send>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
 80004a4:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 80004be:	69bb      	ldr	r3, [r7, #24]
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	71da      	strb	r2, [r3, #7]
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	70fb      	strb	r3, [r7, #3]
 80004dc:	4613      	mov	r3, r2
 80004de:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80004e0:	2304      	movs	r3, #4
 80004e2:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80004e4:	78bb      	ldrb	r3, [r7, #2]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d803      	bhi.n	80004f4 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	3b01      	subs	r3, #1
 80004f2:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	78db      	ldrb	r3, [r3, #3]
 80004f8:	78ba      	ldrb	r2, [r7, #2]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d303      	bcc.n	8000506 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	78db      	ldrb	r3, [r3, #3]
 8000502:	3b01      	subs	r3, #1
 8000504:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 8000506:	78bb      	ldrb	r3, [r7, #2]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	4413      	add	r3, r2
 800050c:	791a      	ldrb	r2, [r3, #4]
 800050e:	78fb      	ldrb	r3, [r7, #3]
 8000510:	4413      	add	r3, r2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	b25b      	sxtb	r3, r3
 8000516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800051a:	b25b      	sxtb	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff ffa9 	bl	8000478 <command>
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0

  HAL_Init();
 8000536:	f000 f9f1 	bl	800091c <HAL_Init>


  SystemClock_Config();
 800053a:	f000 f86d 	bl	8000618 <SystemClock_Config>


  MX_GPIO_Init();
 800053e:	f000 f8b1 	bl	80006a4 <MX_GPIO_Init>


#ifdef displayEntrada
  char buffer[10];
  LiquidCrystal lcd;
  begin(&lcd,16,2,LCD_5x8DOTS);
 8000542:	1d38      	adds	r0, r7, #4
 8000544:	2300      	movs	r3, #0
 8000546:	2202      	movs	r2, #2
 8000548:	2110      	movs	r1, #16
 800054a:	f7ff fe07 	bl	800015c <begin>

  while (1)
  {

  #ifdef displayEntrada
	  setCursor(&lcd, 0, 1);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2201      	movs	r2, #1
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffbb 	bl	80004d0 <setCursor>
	  sprintf(buffer, "%d", HAL_GetTick()/100);
 800055a:	f000 fa37 	bl	80009cc <HAL_GetTick>
 800055e:	4603      	mov	r3, r0
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <main+0xd0>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	095a      	lsrs	r2, r3, #5
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4925      	ldr	r1, [pc, #148]	; (8000604 <main+0xd4>)
 800056e:	4618      	mov	r0, r3
 8000570:	f001 f904 	bl	800177c <siprintf>
	  print(&lcd, buffer);
 8000574:	f107 020c 	add.w	r2, r7, #12
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fea9 	bl	80002d4 <print>
  #endif
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET )
 8000582:	2102      	movs	r1, #2
 8000584:	4820      	ldr	r0, [pc, #128]	; (8000608 <main+0xd8>)
 8000586:	f000 fcaf 	bl	8000ee8 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d020      	beq.n	80005d2 <main+0xa2>
 8000590:	2104      	movs	r1, #4
 8000592:	481d      	ldr	r0, [pc, #116]	; (8000608 <main+0xd8>)
 8000594:	f000 fca8 	bl	8000ee8 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d119      	bne.n	80005d2 <main+0xa2>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	2102      	movs	r1, #2
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0xdc>)
 80005a4:	f000 fcb7 	bl	8000f16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2108      	movs	r1, #8
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <main+0xdc>)
 80005ae:	f000 fcb2 	bl	8000f16 <HAL_GPIO_WritePin>
				setCursor(&lcd, 0, 0);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff89 	bl	80004d0 <setCursor>
				print(&lcd, "TICKET IMPRESSO");
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4913      	ldr	r1, [pc, #76]	; (8000610 <main+0xe0>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe86 	bl	80002d4 <print>
				HAL_Delay(300);
 80005c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005cc:	f000 fa08 	bl	80009e0 <HAL_Delay>
 80005d0:	e014      	b.n	80005fc <main+0xcc>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2102      	movs	r1, #2
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <main+0xdc>)
 80005d8:	f000 fc9d 	bl	8000f16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	2108      	movs	r1, #8
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0xdc>)
 80005e2:	f000 fc98 	bl	8000f16 <HAL_GPIO_WritePin>
				setCursor(&lcd, 0, 0);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff6f 	bl	80004d0 <setCursor>
				print(&lcd, "SEJAM BEM VINDOS");
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <main+0xe4>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe6c 	bl	80002d4 <print>
	  setCursor(&lcd, 0, 1);
 80005fc:	e7a7      	b.n	800054e <main+0x1e>
 80005fe:	bf00      	nop
 8000600:	51eb851f 	.word	0x51eb851f
 8000604:	08002088 	.word	0x08002088
 8000608:	40010c00 	.word	0x40010c00
 800060c:	40010800 	.word	0x40010800
 8000610:	0800208c 	.word	0x0800208c
 8000614:	0800209c 	.word	0x0800209c

08000618 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b090      	sub	sp, #64	; 0x40
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2228      	movs	r2, #40	; 0x28
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f8a0 	bl	800176c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000656:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fc71 	bl	8000f48 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800066c:	f000 f894 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fede 	bl	800144c <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000696:	f000 f87f 	bl	8000798 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3740      	adds	r7, #64	; 0x40
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <MX_GPIO_Init+0xe8>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a33      	ldr	r2, [pc, #204]	; (800078c <MX_GPIO_Init+0xe8>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <MX_GPIO_Init+0xe8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0310 	and.w	r3, r3, #16
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0xe8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2d      	ldr	r2, [pc, #180]	; (800078c <MX_GPIO_Init+0xe8>)
 80006d6:	f043 0320 	orr.w	r3, r3, #32
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_GPIO_Init+0xe8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_GPIO_Init+0xe8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <MX_GPIO_Init+0xe8>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_GPIO_Init+0xe8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_GPIO_Init+0xe8>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <MX_GPIO_Init+0xe8>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_GPIO_Init+0xe8>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|LCD_EN_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f249 010a 	movw	r1, #36874	; 0x900a
 800071e:	481c      	ldr	r0, [pc, #112]	; (8000790 <MX_GPIO_Init+0xec>)
 8000720:	f000 fbf9 	bl	8000f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000724:	2200      	movs	r2, #0
 8000726:	f24f 0108 	movw	r1, #61448	; 0xf008
 800072a:	481a      	ldr	r0, [pc, #104]	; (8000794 <MX_GPIO_Init+0xf0>)
 800072c:	f000 fbf3 	bl	8000f16 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA3 LCD_EN_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|LCD_EN_Pin|LCD_RW_Pin;
 8000730:	f249 030a 	movw	r3, #36874	; 0x900a
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2302      	movs	r3, #2
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	4811      	ldr	r0, [pc, #68]	; (8000790 <MX_GPIO_Init+0xec>)
 800074a:	f000 fa51 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800074e:	2306      	movs	r3, #6
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_GPIO_Init+0xf0>)
 8000762:	f000 fa45 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000766:	f24f 0308 	movw	r3, #61448	; 0xf008
 800076a:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_GPIO_Init+0xf0>)
 8000780:	f000 fa36 	bl	8000bf0 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800
 8000794:	40010c00 	.word	0x40010c00

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_MspInit+0x5c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_MspInit+0x5c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_MspInit+0x5c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x5c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x5c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x5c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_MspInit+0x60>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_MspInit+0x60>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000
 8000804:	40010000 	.word	0x40010000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f8ab 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f000 ff46 	bl	8001718 <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20002800 	.word	0x20002800
 80008b8:	00000400 	.word	0x00000400
 80008bc:	2000008c 	.word	0x2000008c
 80008c0:	200000a8 	.word	0x200000a8

080008c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008f6:	f7ff ffe5 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f000 ff13 	bl	8001724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fe17 	bl	8000530 <main>
  bx lr
 8000902:	4770      	bx	lr
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800090c:	0800210c 	.word	0x0800210c
  ldr r2, =_sbss
 8000910:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000914:	200000a4 	.word	0x200000a4

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_Init+0x28>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_Init+0x28>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f92b 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff ff34 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f935 	bl	8000bd6 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f000 f90b 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000004 	.word	0x20000004

080009a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x1c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <HAL_IncTick+0x20>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000090 	.word	0x20000090

080009cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <HAL_GetTick+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000090 	.word	0x20000090

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff fff0 	bl	80009cc <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffe0 	bl	80009cc <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff90 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff49 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff5e 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffb0 	bl	8000b44 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e161      	b.n	8000ec8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c04:	2201      	movs	r2, #1
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8150 	bne.w	8000ec2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a97      	ldr	r2, [pc, #604]	; (8000e84 <HAL_GPIO_Init+0x294>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d05e      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c2c:	4a95      	ldr	r2, [pc, #596]	; (8000e84 <HAL_GPIO_Init+0x294>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d875      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c32:	4a95      	ldr	r2, [pc, #596]	; (8000e88 <HAL_GPIO_Init+0x298>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d058      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c38:	4a93      	ldr	r2, [pc, #588]	; (8000e88 <HAL_GPIO_Init+0x298>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d86f      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c3e:	4a93      	ldr	r2, [pc, #588]	; (8000e8c <HAL_GPIO_Init+0x29c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d052      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c44:	4a91      	ldr	r2, [pc, #580]	; (8000e8c <HAL_GPIO_Init+0x29c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d869      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c4a:	4a91      	ldr	r2, [pc, #580]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d04c      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c50:	4a8f      	ldr	r2, [pc, #572]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d863      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c56:	4a8f      	ldr	r2, [pc, #572]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d046      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c5c:	4a8d      	ldr	r2, [pc, #564]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d85d      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d82a      	bhi.n	8000cbc <HAL_GPIO_Init+0xcc>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d859      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <HAL_GPIO_Init+0x80>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000cc5 	.word	0x08000cc5
 8000c78:	08000cd7 	.word	0x08000cd7
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d1f 	.word	0x08000d1f
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000d1f 	.word	0x08000d1f
 8000c90:	08000d1f 	.word	0x08000d1f
 8000c94:	08000d1f 	.word	0x08000d1f
 8000c98:	08000d1f 	.word	0x08000d1f
 8000c9c:	08000d1f 	.word	0x08000d1f
 8000ca0:	08000d1f 	.word	0x08000d1f
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000d1f 	.word	0x08000d1f
 8000cac:	08000d1f 	.word	0x08000d1f
 8000cb0:	08000d1f 	.word	0x08000d1f
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	4a76      	ldr	r2, [pc, #472]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc2:	e02c      	b.n	8000d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e029      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e024      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e01f      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e01a      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e013      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	611a      	str	r2, [r3, #16]
          break;
 8000d0a:	e009      	b.n	8000d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	615a      	str	r2, [r3, #20]
          break;
 8000d16:	e003      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          break;
 8000d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d801      	bhi.n	8000d2a <HAL_GPIO_Init+0x13a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_Init+0x13e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	; 0xff
 8000d34:	d802      	bhi.n	8000d3c <HAL_GPIO_Init+0x14c>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x152>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	210f      	movs	r1, #15
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80a9 	beq.w	8000ec2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a49      	ldr	r2, [pc, #292]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b47      	ldr	r3, [pc, #284]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d88:	4a45      	ldr	r2, [pc, #276]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a3d      	ldr	r2, [pc, #244]	; (8000ea4 <HAL_GPIO_Init+0x2b4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d00d      	beq.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d007      	beq.n	8000dcc <HAL_GPIO_Init+0x1dc>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3b      	ldr	r2, [pc, #236]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d101      	bne.n	8000dc8 <HAL_GPIO_Init+0x1d8>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e004      	b.n	8000dd2 <HAL_GPIO_Init+0x1e2>
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0x1e2>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <HAL_GPIO_Init+0x1e2>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	0092      	lsls	r2, r2, #2
 8000dda:	4093      	lsls	r3, r2
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de2:	492f      	ldr	r1, [pc, #188]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	492b      	ldr	r1, [pc, #172]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4927      	ldr	r1, [pc, #156]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4921      	ldr	r1, [pc, #132]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	491d      	ldr	r1, [pc, #116]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	4917      	ldr	r1, [pc, #92]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4913      	ldr	r1, [pc, #76]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d01f      	beq.n	8000eb4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60cb      	str	r3, [r1, #12]
 8000e80:	e01f      	b.n	8000ec2 <HAL_GPIO_Init+0x2d2>
 8000e82:	bf00      	nop
 8000e84:	10320000 	.word	0x10320000
 8000e88:	10310000 	.word	0x10310000
 8000e8c:	10220000 	.word	0x10220000
 8000e90:	10210000 	.word	0x10210000
 8000e94:	10120000 	.word	0x10120000
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_GPIO_Init+0x2f4>)
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4909      	ldr	r1, [pc, #36]	; (8000ee4 <HAL_GPIO_Init+0x2f4>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f47f ae96 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	372c      	adds	r7, #44	; 0x2c
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e001      	b.n	8000f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
 8000f22:	4613      	mov	r3, r2
 8000f24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f32:	e003      	b.n	8000f3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	041a      	lsls	r2, r3, #16
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	611a      	str	r2, [r3, #16]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e272      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8087 	beq.w	8001076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f68:	4b92      	ldr	r3, [pc, #584]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d00c      	beq.n	8000f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f74:	4b8f      	ldr	r3, [pc, #572]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d112      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x5e>
 8000f80:	4b8c      	ldr	r3, [pc, #560]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8e:	4b89      	ldr	r3, [pc, #548]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d06c      	beq.n	8001074 <HAL_RCC_OscConfig+0x12c>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d168      	bne.n	8001074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e24c      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x76>
 8000fb0:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a7f      	ldr	r2, [pc, #508]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e02e      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x98>
 8000fc6:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7a      	ldr	r2, [pc, #488]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a77      	ldr	r2, [pc, #476]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e01d      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0xbc>
 8000fea:	4b72      	ldr	r3, [pc, #456]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a71      	ldr	r2, [pc, #452]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b6f      	ldr	r3, [pc, #444]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a6e      	ldr	r2, [pc, #440]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e00b      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8001004:	4b6b      	ldr	r3, [pc, #428]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a6a      	ldr	r2, [pc, #424]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fcd2 	bl	80009cc <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fcce 	bl	80009cc <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e200      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0xe4>
 800104a:	e014      	b.n	8001076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fcbe 	bl	80009cc <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fcba 	bl	80009cc <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e1ec      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x10c>
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d063      	beq.n	800114a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b08      	cmp	r3, #8
 8001098:	d11c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x18c>
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d116      	bne.n	80010d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_RCC_OscConfig+0x176>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e1c0      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4939      	ldr	r1, [pc, #228]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	e03a      	b.n	800114a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fc73 	bl	80009cc <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc6f 	bl	80009cc <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e1a1      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4927      	ldr	r1, [pc, #156]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
 800111c:	e015      	b.n	800114a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fc52 	bl	80009cc <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fc4e 	bl	80009cc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e180      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d03a      	beq.n	80011cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d019      	beq.n	8001192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_RCC_OscConfig+0x274>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fc32 	bl	80009cc <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fc2e 	bl	80009cc <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e160      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f000 faa6 	bl	80016dc <RCC_Delay>
 8001190:	e01c      	b.n	80011cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_RCC_OscConfig+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fc18 	bl	80009cc <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119e:	e00f      	b.n	80011c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc14 	bl	80009cc <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d908      	bls.n	80011c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e146      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	42420000 	.word	0x42420000
 80011bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	4b92      	ldr	r3, [pc, #584]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e9      	bne.n	80011a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80a6 	beq.w	8001326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a87      	ldr	r2, [pc, #540]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b85      	ldr	r3, [pc, #532]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d118      	bne.n	8001244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7e      	ldr	r2, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121e:	f7ff fbd5 	bl	80009cc <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001226:	f7ff fbd1 	bl	80009cc <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e103      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	4b75      	ldr	r3, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x312>
 800124c:	4b6f      	ldr	r3, [pc, #444]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a6e      	ldr	r2, [pc, #440]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	e02d      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x334>
 8001262:	4b6a      	ldr	r3, [pc, #424]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a69      	ldr	r2, [pc, #420]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	4b67      	ldr	r3, [pc, #412]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a66      	ldr	r2, [pc, #408]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001274:	f023 0304 	bic.w	r3, r3, #4
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	e01c      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d10c      	bne.n	800129e <HAL_RCC_OscConfig+0x356>
 8001284:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a5d      	ldr	r2, [pc, #372]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	e00b      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800129e:	4b5b      	ldr	r3, [pc, #364]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	4b58      	ldr	r3, [pc, #352]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a57      	ldr	r2, [pc, #348]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f023 0304 	bic.w	r3, r3, #4
 80012b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d015      	beq.n	80012ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fb85 	bl	80009cc <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff fb81 	bl	80009cc <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0b1      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012dc:	4b4b      	ldr	r3, [pc, #300]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0ee      	beq.n	80012c6 <HAL_RCC_OscConfig+0x37e>
 80012e8:	e014      	b.n	8001314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb6f 	bl	80009cc <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb6b 	bl	80009cc <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e09b      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1ee      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d105      	bne.n	8001326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a3b      	ldr	r2, [pc, #236]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8087 	beq.w	800143e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d061      	beq.n	8001400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d146      	bne.n	80013d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_RCC_OscConfig+0x4cc>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fb3f 	bl	80009cc <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff fb3b 	bl	80009cc <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e06d      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d108      	bne.n	800138c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4921      	ldr	r1, [pc, #132]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a19      	ldr	r1, [r3, #32]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	430b      	orrs	r3, r1
 800139e:	491b      	ldr	r1, [pc, #108]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x4cc>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb0f 	bl	80009cc <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b2:	f7ff fb0b 	bl	80009cc <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e03d      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x46a>
 80013d0:	e035      	b.n	800143e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_RCC_OscConfig+0x4cc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff faf8 	bl	80009cc <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff faf4 	bl	80009cc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e026      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x498>
 80013fe:	e01e      	b.n	800143e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e019      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
 800140c:	40021000 	.word	0x40021000
 8001410:	40007000 	.word	0x40007000
 8001414:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x500>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	429a      	cmp	r2, r3
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0d0      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b6a      	ldr	r3, [pc, #424]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d910      	bls.n	8001490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b67      	ldr	r3, [pc, #412]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 0207 	bic.w	r2, r3, #7
 8001476:	4965      	ldr	r1, [pc, #404]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0b8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	494d      	ldr	r1, [pc, #308]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d040      	beq.n	800156c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e073      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e06b      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4936      	ldr	r1, [pc, #216]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800153c:	f7ff fa46 	bl	80009cc <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff fa42 	bl	80009cc <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e053      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d210      	bcs.n	800159c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0207 	bic.w	r2, r3, #7
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e032      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	490e      	ldr	r1, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015da:	f000 f821 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015ec:	5ccb      	ldrb	r3, [r1, r3]
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1cc>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1d0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff f9a4 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000
 8001610:	40021000 	.word	0x40021000
 8001614:	080020c0 	.word	0x080020c0
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	b490      	push	{r4, r7}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_RCC_GetSysClockFreq+0xac>)
 8001628:	1d3c      	adds	r4, r7, #4
 800162a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001630:	f240 2301 	movw	r3, #513	; 0x201
 8001634:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x40>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x46>
 800165e:	e02b      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001662:	623b      	str	r3, [r7, #32]
      break;
 8001664:	e02b      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3328      	adds	r3, #40	; 0x28
 8001670:	443b      	add	r3, r7
 8001672:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001676:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d012      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0c5b      	lsrs	r3, r3, #17
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	3328      	adds	r3, #40	; 0x28
 800168e:	443b      	add	r3, r7
 8001690:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001694:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800169a:	fb03 f202 	mul.w	r2, r3, r2
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	e004      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	623b      	str	r3, [r7, #32]
      break;
 80016b6:	e002      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ba:	623b      	str	r3, [r7, #32]
      break;
 80016bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016be:	6a3b      	ldr	r3, [r7, #32]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc90      	pop	{r4, r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	080020b0 	.word	0x080020b0
 80016d0:	40021000 	.word	0x40021000
 80016d4:	007a1200 	.word	0x007a1200
 80016d8:	003d0900 	.word	0x003d0900

080016dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <RCC_Delay+0x34>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <RCC_Delay+0x38>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a5b      	lsrs	r3, r3, #9
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f8:	bf00      	nop
  }
  while (Delay --);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	60fa      	str	r2, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f9      	bne.n	80016f8 <RCC_Delay+0x1c>
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000000 	.word	0x20000000
 8001714:	10624dd3 	.word	0x10624dd3

08001718 <__errno>:
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <__errno+0x8>)
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000000c 	.word	0x2000000c

08001724 <__libc_init_array>:
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	2600      	movs	r6, #0
 8001728:	4d0c      	ldr	r5, [pc, #48]	; (800175c <__libc_init_array+0x38>)
 800172a:	4c0d      	ldr	r4, [pc, #52]	; (8001760 <__libc_init_array+0x3c>)
 800172c:	1b64      	subs	r4, r4, r5
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	42a6      	cmp	r6, r4
 8001732:	d109      	bne.n	8001748 <__libc_init_array+0x24>
 8001734:	f000 fc9c 	bl	8002070 <_init>
 8001738:	2600      	movs	r6, #0
 800173a:	4d0a      	ldr	r5, [pc, #40]	; (8001764 <__libc_init_array+0x40>)
 800173c:	4c0a      	ldr	r4, [pc, #40]	; (8001768 <__libc_init_array+0x44>)
 800173e:	1b64      	subs	r4, r4, r5
 8001740:	10a4      	asrs	r4, r4, #2
 8001742:	42a6      	cmp	r6, r4
 8001744:	d105      	bne.n	8001752 <__libc_init_array+0x2e>
 8001746:	bd70      	pop	{r4, r5, r6, pc}
 8001748:	f855 3b04 	ldr.w	r3, [r5], #4
 800174c:	4798      	blx	r3
 800174e:	3601      	adds	r6, #1
 8001750:	e7ee      	b.n	8001730 <__libc_init_array+0xc>
 8001752:	f855 3b04 	ldr.w	r3, [r5], #4
 8001756:	4798      	blx	r3
 8001758:	3601      	adds	r6, #1
 800175a:	e7f2      	b.n	8001742 <__libc_init_array+0x1e>
 800175c:	08002104 	.word	0x08002104
 8001760:	08002104 	.word	0x08002104
 8001764:	08002104 	.word	0x08002104
 8001768:	08002108 	.word	0x08002108

0800176c <memset>:
 800176c:	4603      	mov	r3, r0
 800176e:	4402      	add	r2, r0
 8001770:	4293      	cmp	r3, r2
 8001772:	d100      	bne.n	8001776 <memset+0xa>
 8001774:	4770      	bx	lr
 8001776:	f803 1b01 	strb.w	r1, [r3], #1
 800177a:	e7f9      	b.n	8001770 <memset+0x4>

0800177c <siprintf>:
 800177c:	b40e      	push	{r1, r2, r3}
 800177e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001782:	b500      	push	{lr}
 8001784:	b09c      	sub	sp, #112	; 0x70
 8001786:	ab1d      	add	r3, sp, #116	; 0x74
 8001788:	9002      	str	r0, [sp, #8]
 800178a:	9006      	str	r0, [sp, #24]
 800178c:	9107      	str	r1, [sp, #28]
 800178e:	9104      	str	r1, [sp, #16]
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <siprintf+0x38>)
 8001792:	4909      	ldr	r1, [pc, #36]	; (80017b8 <siprintf+0x3c>)
 8001794:	f853 2b04 	ldr.w	r2, [r3], #4
 8001798:	9105      	str	r1, [sp, #20]
 800179a:	6800      	ldr	r0, [r0, #0]
 800179c:	a902      	add	r1, sp, #8
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	f000 f868 	bl	8001874 <_svfiprintf_r>
 80017a4:	2200      	movs	r2, #0
 80017a6:	9b02      	ldr	r3, [sp, #8]
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	b01c      	add	sp, #112	; 0x70
 80017ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80017b0:	b003      	add	sp, #12
 80017b2:	4770      	bx	lr
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	ffff0208 	.word	0xffff0208

080017bc <__ssputs_r>:
 80017bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017c0:	688e      	ldr	r6, [r1, #8]
 80017c2:	4682      	mov	sl, r0
 80017c4:	429e      	cmp	r6, r3
 80017c6:	460c      	mov	r4, r1
 80017c8:	4690      	mov	r8, r2
 80017ca:	461f      	mov	r7, r3
 80017cc:	d838      	bhi.n	8001840 <__ssputs_r+0x84>
 80017ce:	898a      	ldrh	r2, [r1, #12]
 80017d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017d4:	d032      	beq.n	800183c <__ssputs_r+0x80>
 80017d6:	6825      	ldr	r5, [r4, #0]
 80017d8:	6909      	ldr	r1, [r1, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	eba5 0901 	sub.w	r9, r5, r1
 80017e0:	6965      	ldr	r5, [r4, #20]
 80017e2:	444b      	add	r3, r9
 80017e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80017ec:	106d      	asrs	r5, r5, #1
 80017ee:	429d      	cmp	r5, r3
 80017f0:	bf38      	it	cc
 80017f2:	461d      	movcc	r5, r3
 80017f4:	0553      	lsls	r3, r2, #21
 80017f6:	d531      	bpl.n	800185c <__ssputs_r+0xa0>
 80017f8:	4629      	mov	r1, r5
 80017fa:	f000 fb6f 	bl	8001edc <_malloc_r>
 80017fe:	4606      	mov	r6, r0
 8001800:	b950      	cbnz	r0, 8001818 <__ssputs_r+0x5c>
 8001802:	230c      	movs	r3, #12
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f8ca 3000 	str.w	r3, [sl]
 800180c:	89a3      	ldrh	r3, [r4, #12]
 800180e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001812:	81a3      	strh	r3, [r4, #12]
 8001814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001818:	464a      	mov	r2, r9
 800181a:	6921      	ldr	r1, [r4, #16]
 800181c:	f000 face 	bl	8001dbc <memcpy>
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182a:	81a3      	strh	r3, [r4, #12]
 800182c:	6126      	str	r6, [r4, #16]
 800182e:	444e      	add	r6, r9
 8001830:	6026      	str	r6, [r4, #0]
 8001832:	463e      	mov	r6, r7
 8001834:	6165      	str	r5, [r4, #20]
 8001836:	eba5 0509 	sub.w	r5, r5, r9
 800183a:	60a5      	str	r5, [r4, #8]
 800183c:	42be      	cmp	r6, r7
 800183e:	d900      	bls.n	8001842 <__ssputs_r+0x86>
 8001840:	463e      	mov	r6, r7
 8001842:	4632      	mov	r2, r6
 8001844:	4641      	mov	r1, r8
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	f000 fac6 	bl	8001dd8 <memmove>
 800184c:	68a3      	ldr	r3, [r4, #8]
 800184e:	2000      	movs	r0, #0
 8001850:	1b9b      	subs	r3, r3, r6
 8001852:	60a3      	str	r3, [r4, #8]
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	4433      	add	r3, r6
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	e7db      	b.n	8001814 <__ssputs_r+0x58>
 800185c:	462a      	mov	r2, r5
 800185e:	f000 fbb1 	bl	8001fc4 <_realloc_r>
 8001862:	4606      	mov	r6, r0
 8001864:	2800      	cmp	r0, #0
 8001866:	d1e1      	bne.n	800182c <__ssputs_r+0x70>
 8001868:	4650      	mov	r0, sl
 800186a:	6921      	ldr	r1, [r4, #16]
 800186c:	f000 face 	bl	8001e0c <_free_r>
 8001870:	e7c7      	b.n	8001802 <__ssputs_r+0x46>
	...

08001874 <_svfiprintf_r>:
 8001874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001878:	4698      	mov	r8, r3
 800187a:	898b      	ldrh	r3, [r1, #12]
 800187c:	4607      	mov	r7, r0
 800187e:	061b      	lsls	r3, r3, #24
 8001880:	460d      	mov	r5, r1
 8001882:	4614      	mov	r4, r2
 8001884:	b09d      	sub	sp, #116	; 0x74
 8001886:	d50e      	bpl.n	80018a6 <_svfiprintf_r+0x32>
 8001888:	690b      	ldr	r3, [r1, #16]
 800188a:	b963      	cbnz	r3, 80018a6 <_svfiprintf_r+0x32>
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	f000 fb25 	bl	8001edc <_malloc_r>
 8001892:	6028      	str	r0, [r5, #0]
 8001894:	6128      	str	r0, [r5, #16]
 8001896:	b920      	cbnz	r0, 80018a2 <_svfiprintf_r+0x2e>
 8001898:	230c      	movs	r3, #12
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	e0d1      	b.n	8001a46 <_svfiprintf_r+0x1d2>
 80018a2:	2340      	movs	r3, #64	; 0x40
 80018a4:	616b      	str	r3, [r5, #20]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9309      	str	r3, [sp, #36]	; 0x24
 80018aa:	2320      	movs	r3, #32
 80018ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018b0:	2330      	movs	r3, #48	; 0x30
 80018b2:	f04f 0901 	mov.w	r9, #1
 80018b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80018ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001a60 <_svfiprintf_r+0x1ec>
 80018be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018c2:	4623      	mov	r3, r4
 80018c4:	469a      	mov	sl, r3
 80018c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018ca:	b10a      	cbz	r2, 80018d0 <_svfiprintf_r+0x5c>
 80018cc:	2a25      	cmp	r2, #37	; 0x25
 80018ce:	d1f9      	bne.n	80018c4 <_svfiprintf_r+0x50>
 80018d0:	ebba 0b04 	subs.w	fp, sl, r4
 80018d4:	d00b      	beq.n	80018ee <_svfiprintf_r+0x7a>
 80018d6:	465b      	mov	r3, fp
 80018d8:	4622      	mov	r2, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	4638      	mov	r0, r7
 80018de:	f7ff ff6d 	bl	80017bc <__ssputs_r>
 80018e2:	3001      	adds	r0, #1
 80018e4:	f000 80aa 	beq.w	8001a3c <_svfiprintf_r+0x1c8>
 80018e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018ea:	445a      	add	r2, fp
 80018ec:	9209      	str	r2, [sp, #36]	; 0x24
 80018ee:	f89a 3000 	ldrb.w	r3, [sl]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80a2 	beq.w	8001a3c <_svfiprintf_r+0x1c8>
 80018f8:	2300      	movs	r3, #0
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295
 80018fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001902:	f10a 0a01 	add.w	sl, sl, #1
 8001906:	9304      	str	r3, [sp, #16]
 8001908:	9307      	str	r3, [sp, #28]
 800190a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800190e:	931a      	str	r3, [sp, #104]	; 0x68
 8001910:	4654      	mov	r4, sl
 8001912:	2205      	movs	r2, #5
 8001914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001918:	4851      	ldr	r0, [pc, #324]	; (8001a60 <_svfiprintf_r+0x1ec>)
 800191a:	f000 fa41 	bl	8001da0 <memchr>
 800191e:	9a04      	ldr	r2, [sp, #16]
 8001920:	b9d8      	cbnz	r0, 800195a <_svfiprintf_r+0xe6>
 8001922:	06d0      	lsls	r0, r2, #27
 8001924:	bf44      	itt	mi
 8001926:	2320      	movmi	r3, #32
 8001928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800192c:	0711      	lsls	r1, r2, #28
 800192e:	bf44      	itt	mi
 8001930:	232b      	movmi	r3, #43	; 0x2b
 8001932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001936:	f89a 3000 	ldrb.w	r3, [sl]
 800193a:	2b2a      	cmp	r3, #42	; 0x2a
 800193c:	d015      	beq.n	800196a <_svfiprintf_r+0xf6>
 800193e:	4654      	mov	r4, sl
 8001940:	2000      	movs	r0, #0
 8001942:	f04f 0c0a 	mov.w	ip, #10
 8001946:	9a07      	ldr	r2, [sp, #28]
 8001948:	4621      	mov	r1, r4
 800194a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800194e:	3b30      	subs	r3, #48	; 0x30
 8001950:	2b09      	cmp	r3, #9
 8001952:	d94e      	bls.n	80019f2 <_svfiprintf_r+0x17e>
 8001954:	b1b0      	cbz	r0, 8001984 <_svfiprintf_r+0x110>
 8001956:	9207      	str	r2, [sp, #28]
 8001958:	e014      	b.n	8001984 <_svfiprintf_r+0x110>
 800195a:	eba0 0308 	sub.w	r3, r0, r8
 800195e:	fa09 f303 	lsl.w	r3, r9, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	46a2      	mov	sl, r4
 8001966:	9304      	str	r3, [sp, #16]
 8001968:	e7d2      	b.n	8001910 <_svfiprintf_r+0x9c>
 800196a:	9b03      	ldr	r3, [sp, #12]
 800196c:	1d19      	adds	r1, r3, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	9103      	str	r1, [sp, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	bfbb      	ittet	lt
 8001976:	425b      	neglt	r3, r3
 8001978:	f042 0202 	orrlt.w	r2, r2, #2
 800197c:	9307      	strge	r3, [sp, #28]
 800197e:	9307      	strlt	r3, [sp, #28]
 8001980:	bfb8      	it	lt
 8001982:	9204      	strlt	r2, [sp, #16]
 8001984:	7823      	ldrb	r3, [r4, #0]
 8001986:	2b2e      	cmp	r3, #46	; 0x2e
 8001988:	d10c      	bne.n	80019a4 <_svfiprintf_r+0x130>
 800198a:	7863      	ldrb	r3, [r4, #1]
 800198c:	2b2a      	cmp	r3, #42	; 0x2a
 800198e:	d135      	bne.n	80019fc <_svfiprintf_r+0x188>
 8001990:	9b03      	ldr	r3, [sp, #12]
 8001992:	3402      	adds	r4, #2
 8001994:	1d1a      	adds	r2, r3, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	9203      	str	r2, [sp, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	bfb8      	it	lt
 800199e:	f04f 33ff 	movlt.w	r3, #4294967295
 80019a2:	9305      	str	r3, [sp, #20]
 80019a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001a64 <_svfiprintf_r+0x1f0>
 80019a8:	2203      	movs	r2, #3
 80019aa:	4650      	mov	r0, sl
 80019ac:	7821      	ldrb	r1, [r4, #0]
 80019ae:	f000 f9f7 	bl	8001da0 <memchr>
 80019b2:	b140      	cbz	r0, 80019c6 <_svfiprintf_r+0x152>
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	eba0 000a 	sub.w	r0, r0, sl
 80019ba:	fa03 f000 	lsl.w	r0, r3, r0
 80019be:	9b04      	ldr	r3, [sp, #16]
 80019c0:	3401      	adds	r4, #1
 80019c2:	4303      	orrs	r3, r0
 80019c4:	9304      	str	r3, [sp, #16]
 80019c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ca:	2206      	movs	r2, #6
 80019cc:	4826      	ldr	r0, [pc, #152]	; (8001a68 <_svfiprintf_r+0x1f4>)
 80019ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019d2:	f000 f9e5 	bl	8001da0 <memchr>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d038      	beq.n	8001a4c <_svfiprintf_r+0x1d8>
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <_svfiprintf_r+0x1f8>)
 80019dc:	bb1b      	cbnz	r3, 8001a26 <_svfiprintf_r+0x1b2>
 80019de:	9b03      	ldr	r3, [sp, #12]
 80019e0:	3307      	adds	r3, #7
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	3308      	adds	r3, #8
 80019e8:	9303      	str	r3, [sp, #12]
 80019ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ec:	4433      	add	r3, r6
 80019ee:	9309      	str	r3, [sp, #36]	; 0x24
 80019f0:	e767      	b.n	80018c2 <_svfiprintf_r+0x4e>
 80019f2:	460c      	mov	r4, r1
 80019f4:	2001      	movs	r0, #1
 80019f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80019fa:	e7a5      	b.n	8001948 <_svfiprintf_r+0xd4>
 80019fc:	2300      	movs	r3, #0
 80019fe:	f04f 0c0a 	mov.w	ip, #10
 8001a02:	4619      	mov	r1, r3
 8001a04:	3401      	adds	r4, #1
 8001a06:	9305      	str	r3, [sp, #20]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a0e:	3a30      	subs	r2, #48	; 0x30
 8001a10:	2a09      	cmp	r2, #9
 8001a12:	d903      	bls.n	8001a1c <_svfiprintf_r+0x1a8>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0c5      	beq.n	80019a4 <_svfiprintf_r+0x130>
 8001a18:	9105      	str	r1, [sp, #20]
 8001a1a:	e7c3      	b.n	80019a4 <_svfiprintf_r+0x130>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	2301      	movs	r3, #1
 8001a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a24:	e7f0      	b.n	8001a08 <_svfiprintf_r+0x194>
 8001a26:	ab03      	add	r3, sp, #12
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	462a      	mov	r2, r5
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_svfiprintf_r+0x1fc>)
 8001a30:	a904      	add	r1, sp, #16
 8001a32:	f3af 8000 	nop.w
 8001a36:	1c42      	adds	r2, r0, #1
 8001a38:	4606      	mov	r6, r0
 8001a3a:	d1d6      	bne.n	80019ea <_svfiprintf_r+0x176>
 8001a3c:	89ab      	ldrh	r3, [r5, #12]
 8001a3e:	065b      	lsls	r3, r3, #25
 8001a40:	f53f af2c 	bmi.w	800189c <_svfiprintf_r+0x28>
 8001a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a46:	b01d      	add	sp, #116	; 0x74
 8001a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a4c:	ab03      	add	r3, sp, #12
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	462a      	mov	r2, r5
 8001a52:	4638      	mov	r0, r7
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <_svfiprintf_r+0x1fc>)
 8001a56:	a904      	add	r1, sp, #16
 8001a58:	f000 f87c 	bl	8001b54 <_printf_i>
 8001a5c:	e7eb      	b.n	8001a36 <_svfiprintf_r+0x1c2>
 8001a5e:	bf00      	nop
 8001a60:	080020d0 	.word	0x080020d0
 8001a64:	080020d6 	.word	0x080020d6
 8001a68:	080020da 	.word	0x080020da
 8001a6c:	00000000 	.word	0x00000000
 8001a70:	080017bd 	.word	0x080017bd

08001a74 <_printf_common>:
 8001a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a78:	4616      	mov	r6, r2
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	688a      	ldr	r2, [r1, #8]
 8001a7e:	690b      	ldr	r3, [r1, #16]
 8001a80:	4607      	mov	r7, r0
 8001a82:	4293      	cmp	r3, r2
 8001a84:	bfb8      	it	lt
 8001a86:	4613      	movlt	r3, r2
 8001a88:	6033      	str	r3, [r6, #0]
 8001a8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a8e:	460c      	mov	r4, r1
 8001a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a94:	b10a      	cbz	r2, 8001a9a <_printf_common+0x26>
 8001a96:	3301      	adds	r3, #1
 8001a98:	6033      	str	r3, [r6, #0]
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	0699      	lsls	r1, r3, #26
 8001a9e:	bf42      	ittt	mi
 8001aa0:	6833      	ldrmi	r3, [r6, #0]
 8001aa2:	3302      	addmi	r3, #2
 8001aa4:	6033      	strmi	r3, [r6, #0]
 8001aa6:	6825      	ldr	r5, [r4, #0]
 8001aa8:	f015 0506 	ands.w	r5, r5, #6
 8001aac:	d106      	bne.n	8001abc <_printf_common+0x48>
 8001aae:	f104 0a19 	add.w	sl, r4, #25
 8001ab2:	68e3      	ldr	r3, [r4, #12]
 8001ab4:	6832      	ldr	r2, [r6, #0]
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	42ab      	cmp	r3, r5
 8001aba:	dc28      	bgt.n	8001b0e <_printf_common+0x9a>
 8001abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ac0:	1e13      	subs	r3, r2, #0
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	bf18      	it	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	0692      	lsls	r2, r2, #26
 8001aca:	d42d      	bmi.n	8001b28 <_printf_common+0xb4>
 8001acc:	4649      	mov	r1, r9
 8001ace:	4638      	mov	r0, r7
 8001ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ad4:	47c0      	blx	r8
 8001ad6:	3001      	adds	r0, #1
 8001ad8:	d020      	beq.n	8001b1c <_printf_common+0xa8>
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	68e5      	ldr	r5, [r4, #12]
 8001ade:	f003 0306 	and.w	r3, r3, #6
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf18      	it	ne
 8001ae6:	2500      	movne	r5, #0
 8001ae8:	6832      	ldr	r2, [r6, #0]
 8001aea:	f04f 0600 	mov.w	r6, #0
 8001aee:	68a3      	ldr	r3, [r4, #8]
 8001af0:	bf08      	it	eq
 8001af2:	1aad      	subeq	r5, r5, r2
 8001af4:	6922      	ldr	r2, [r4, #16]
 8001af6:	bf08      	it	eq
 8001af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bfc4      	itt	gt
 8001b00:	1a9b      	subgt	r3, r3, r2
 8001b02:	18ed      	addgt	r5, r5, r3
 8001b04:	341a      	adds	r4, #26
 8001b06:	42b5      	cmp	r5, r6
 8001b08:	d11a      	bne.n	8001b40 <_printf_common+0xcc>
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e008      	b.n	8001b20 <_printf_common+0xac>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	4652      	mov	r2, sl
 8001b12:	4649      	mov	r1, r9
 8001b14:	4638      	mov	r0, r7
 8001b16:	47c0      	blx	r8
 8001b18:	3001      	adds	r0, #1
 8001b1a:	d103      	bne.n	8001b24 <_printf_common+0xb0>
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b24:	3501      	adds	r5, #1
 8001b26:	e7c4      	b.n	8001ab2 <_printf_common+0x3e>
 8001b28:	2030      	movs	r0, #48	; 0x30
 8001b2a:	18e1      	adds	r1, r4, r3
 8001b2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b36:	4422      	add	r2, r4
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b3e:	e7c5      	b.n	8001acc <_printf_common+0x58>
 8001b40:	2301      	movs	r3, #1
 8001b42:	4622      	mov	r2, r4
 8001b44:	4649      	mov	r1, r9
 8001b46:	4638      	mov	r0, r7
 8001b48:	47c0      	blx	r8
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	d0e6      	beq.n	8001b1c <_printf_common+0xa8>
 8001b4e:	3601      	adds	r6, #1
 8001b50:	e7d9      	b.n	8001b06 <_printf_common+0x92>
	...

08001b54 <_printf_i>:
 8001b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b58:	7e0f      	ldrb	r7, [r1, #24]
 8001b5a:	4691      	mov	r9, r2
 8001b5c:	2f78      	cmp	r7, #120	; 0x78
 8001b5e:	4680      	mov	r8, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	469a      	mov	sl, r3
 8001b64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b6a:	d807      	bhi.n	8001b7c <_printf_i+0x28>
 8001b6c:	2f62      	cmp	r7, #98	; 0x62
 8001b6e:	d80a      	bhi.n	8001b86 <_printf_i+0x32>
 8001b70:	2f00      	cmp	r7, #0
 8001b72:	f000 80d9 	beq.w	8001d28 <_printf_i+0x1d4>
 8001b76:	2f58      	cmp	r7, #88	; 0x58
 8001b78:	f000 80a4 	beq.w	8001cc4 <_printf_i+0x170>
 8001b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b84:	e03a      	b.n	8001bfc <_printf_i+0xa8>
 8001b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b8a:	2b15      	cmp	r3, #21
 8001b8c:	d8f6      	bhi.n	8001b7c <_printf_i+0x28>
 8001b8e:	a101      	add	r1, pc, #4	; (adr r1, 8001b94 <_printf_i+0x40>)
 8001b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b94:	08001bed 	.word	0x08001bed
 8001b98:	08001c01 	.word	0x08001c01
 8001b9c:	08001b7d 	.word	0x08001b7d
 8001ba0:	08001b7d 	.word	0x08001b7d
 8001ba4:	08001b7d 	.word	0x08001b7d
 8001ba8:	08001b7d 	.word	0x08001b7d
 8001bac:	08001c01 	.word	0x08001c01
 8001bb0:	08001b7d 	.word	0x08001b7d
 8001bb4:	08001b7d 	.word	0x08001b7d
 8001bb8:	08001b7d 	.word	0x08001b7d
 8001bbc:	08001b7d 	.word	0x08001b7d
 8001bc0:	08001d0f 	.word	0x08001d0f
 8001bc4:	08001c31 	.word	0x08001c31
 8001bc8:	08001cf1 	.word	0x08001cf1
 8001bcc:	08001b7d 	.word	0x08001b7d
 8001bd0:	08001b7d 	.word	0x08001b7d
 8001bd4:	08001d31 	.word	0x08001d31
 8001bd8:	08001b7d 	.word	0x08001b7d
 8001bdc:	08001c31 	.word	0x08001c31
 8001be0:	08001b7d 	.word	0x08001b7d
 8001be4:	08001b7d 	.word	0x08001b7d
 8001be8:	08001cf9 	.word	0x08001cf9
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	602a      	str	r2, [r5, #0]
 8001bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0a4      	b.n	8001d4a <_printf_i+0x1f6>
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	6829      	ldr	r1, [r5, #0]
 8001c04:	0606      	lsls	r6, r0, #24
 8001c06:	f101 0304 	add.w	r3, r1, #4
 8001c0a:	d50a      	bpl.n	8001c22 <_printf_i+0xce>
 8001c0c:	680e      	ldr	r6, [r1, #0]
 8001c0e:	602b      	str	r3, [r5, #0]
 8001c10:	2e00      	cmp	r6, #0
 8001c12:	da03      	bge.n	8001c1c <_printf_i+0xc8>
 8001c14:	232d      	movs	r3, #45	; 0x2d
 8001c16:	4276      	negs	r6, r6
 8001c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	485e      	ldr	r0, [pc, #376]	; (8001d98 <_printf_i+0x244>)
 8001c20:	e019      	b.n	8001c56 <_printf_i+0x102>
 8001c22:	680e      	ldr	r6, [r1, #0]
 8001c24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c28:	602b      	str	r3, [r5, #0]
 8001c2a:	bf18      	it	ne
 8001c2c:	b236      	sxthne	r6, r6
 8001c2e:	e7ef      	b.n	8001c10 <_printf_i+0xbc>
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	6820      	ldr	r0, [r4, #0]
 8001c34:	1d19      	adds	r1, r3, #4
 8001c36:	6029      	str	r1, [r5, #0]
 8001c38:	0601      	lsls	r1, r0, #24
 8001c3a:	d501      	bpl.n	8001c40 <_printf_i+0xec>
 8001c3c:	681e      	ldr	r6, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <_printf_i+0xf2>
 8001c40:	0646      	lsls	r6, r0, #25
 8001c42:	d5fb      	bpl.n	8001c3c <_printf_i+0xe8>
 8001c44:	881e      	ldrh	r6, [r3, #0]
 8001c46:	2f6f      	cmp	r7, #111	; 0x6f
 8001c48:	bf0c      	ite	eq
 8001c4a:	2308      	moveq	r3, #8
 8001c4c:	230a      	movne	r3, #10
 8001c4e:	4852      	ldr	r0, [pc, #328]	; (8001d98 <_printf_i+0x244>)
 8001c50:	2100      	movs	r1, #0
 8001c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c56:	6865      	ldr	r5, [r4, #4]
 8001c58:	2d00      	cmp	r5, #0
 8001c5a:	bfa8      	it	ge
 8001c5c:	6821      	ldrge	r1, [r4, #0]
 8001c5e:	60a5      	str	r5, [r4, #8]
 8001c60:	bfa4      	itt	ge
 8001c62:	f021 0104 	bicge.w	r1, r1, #4
 8001c66:	6021      	strge	r1, [r4, #0]
 8001c68:	b90e      	cbnz	r6, 8001c6e <_printf_i+0x11a>
 8001c6a:	2d00      	cmp	r5, #0
 8001c6c:	d04d      	beq.n	8001d0a <_printf_i+0x1b6>
 8001c6e:	4615      	mov	r5, r2
 8001c70:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c74:	fb03 6711 	mls	r7, r3, r1, r6
 8001c78:	5dc7      	ldrb	r7, [r0, r7]
 8001c7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c7e:	4637      	mov	r7, r6
 8001c80:	42bb      	cmp	r3, r7
 8001c82:	460e      	mov	r6, r1
 8001c84:	d9f4      	bls.n	8001c70 <_printf_i+0x11c>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d10b      	bne.n	8001ca2 <_printf_i+0x14e>
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	07de      	lsls	r6, r3, #31
 8001c8e:	d508      	bpl.n	8001ca2 <_printf_i+0x14e>
 8001c90:	6923      	ldr	r3, [r4, #16]
 8001c92:	6861      	ldr	r1, [r4, #4]
 8001c94:	4299      	cmp	r1, r3
 8001c96:	bfde      	ittt	le
 8001c98:	2330      	movle	r3, #48	; 0x30
 8001c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ca2:	1b52      	subs	r2, r2, r5
 8001ca4:	6122      	str	r2, [r4, #16]
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4640      	mov	r0, r8
 8001cac:	f8cd a000 	str.w	sl, [sp]
 8001cb0:	aa03      	add	r2, sp, #12
 8001cb2:	f7ff fedf 	bl	8001a74 <_printf_common>
 8001cb6:	3001      	adds	r0, #1
 8001cb8:	d14c      	bne.n	8001d54 <_printf_i+0x200>
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbe:	b004      	add	sp, #16
 8001cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cc4:	4834      	ldr	r0, [pc, #208]	; (8001d98 <_printf_i+0x244>)
 8001cc6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001cca:	6829      	ldr	r1, [r5, #0]
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	f851 6b04 	ldr.w	r6, [r1], #4
 8001cd2:	6029      	str	r1, [r5, #0]
 8001cd4:	061d      	lsls	r5, r3, #24
 8001cd6:	d514      	bpl.n	8001d02 <_printf_i+0x1ae>
 8001cd8:	07df      	lsls	r7, r3, #31
 8001cda:	bf44      	itt	mi
 8001cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8001ce0:	6023      	strmi	r3, [r4, #0]
 8001ce2:	b91e      	cbnz	r6, 8001cec <_printf_i+0x198>
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	f023 0320 	bic.w	r3, r3, #32
 8001cea:	6023      	str	r3, [r4, #0]
 8001cec:	2310      	movs	r3, #16
 8001cee:	e7af      	b.n	8001c50 <_printf_i+0xfc>
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	f043 0320 	orr.w	r3, r3, #32
 8001cf6:	6023      	str	r3, [r4, #0]
 8001cf8:	2378      	movs	r3, #120	; 0x78
 8001cfa:	4828      	ldr	r0, [pc, #160]	; (8001d9c <_printf_i+0x248>)
 8001cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d00:	e7e3      	b.n	8001cca <_printf_i+0x176>
 8001d02:	0659      	lsls	r1, r3, #25
 8001d04:	bf48      	it	mi
 8001d06:	b2b6      	uxthmi	r6, r6
 8001d08:	e7e6      	b.n	8001cd8 <_printf_i+0x184>
 8001d0a:	4615      	mov	r5, r2
 8001d0c:	e7bb      	b.n	8001c86 <_printf_i+0x132>
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	6826      	ldr	r6, [r4, #0]
 8001d12:	1d18      	adds	r0, r3, #4
 8001d14:	6961      	ldr	r1, [r4, #20]
 8001d16:	6028      	str	r0, [r5, #0]
 8001d18:	0635      	lsls	r5, r6, #24
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	d501      	bpl.n	8001d22 <_printf_i+0x1ce>
 8001d1e:	6019      	str	r1, [r3, #0]
 8001d20:	e002      	b.n	8001d28 <_printf_i+0x1d4>
 8001d22:	0670      	lsls	r0, r6, #25
 8001d24:	d5fb      	bpl.n	8001d1e <_printf_i+0x1ca>
 8001d26:	8019      	strh	r1, [r3, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4615      	mov	r5, r2
 8001d2c:	6123      	str	r3, [r4, #16]
 8001d2e:	e7ba      	b.n	8001ca6 <_printf_i+0x152>
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	2100      	movs	r1, #0
 8001d34:	1d1a      	adds	r2, r3, #4
 8001d36:	602a      	str	r2, [r5, #0]
 8001d38:	681d      	ldr	r5, [r3, #0]
 8001d3a:	6862      	ldr	r2, [r4, #4]
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 f82f 	bl	8001da0 <memchr>
 8001d42:	b108      	cbz	r0, 8001d48 <_printf_i+0x1f4>
 8001d44:	1b40      	subs	r0, r0, r5
 8001d46:	6060      	str	r0, [r4, #4]
 8001d48:	6863      	ldr	r3, [r4, #4]
 8001d4a:	6123      	str	r3, [r4, #16]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d52:	e7a8      	b.n	8001ca6 <_printf_i+0x152>
 8001d54:	462a      	mov	r2, r5
 8001d56:	4649      	mov	r1, r9
 8001d58:	4640      	mov	r0, r8
 8001d5a:	6923      	ldr	r3, [r4, #16]
 8001d5c:	47d0      	blx	sl
 8001d5e:	3001      	adds	r0, #1
 8001d60:	d0ab      	beq.n	8001cba <_printf_i+0x166>
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	079b      	lsls	r3, r3, #30
 8001d66:	d413      	bmi.n	8001d90 <_printf_i+0x23c>
 8001d68:	68e0      	ldr	r0, [r4, #12]
 8001d6a:	9b03      	ldr	r3, [sp, #12]
 8001d6c:	4298      	cmp	r0, r3
 8001d6e:	bfb8      	it	lt
 8001d70:	4618      	movlt	r0, r3
 8001d72:	e7a4      	b.n	8001cbe <_printf_i+0x16a>
 8001d74:	2301      	movs	r3, #1
 8001d76:	4632      	mov	r2, r6
 8001d78:	4649      	mov	r1, r9
 8001d7a:	4640      	mov	r0, r8
 8001d7c:	47d0      	blx	sl
 8001d7e:	3001      	adds	r0, #1
 8001d80:	d09b      	beq.n	8001cba <_printf_i+0x166>
 8001d82:	3501      	adds	r5, #1
 8001d84:	68e3      	ldr	r3, [r4, #12]
 8001d86:	9903      	ldr	r1, [sp, #12]
 8001d88:	1a5b      	subs	r3, r3, r1
 8001d8a:	42ab      	cmp	r3, r5
 8001d8c:	dcf2      	bgt.n	8001d74 <_printf_i+0x220>
 8001d8e:	e7eb      	b.n	8001d68 <_printf_i+0x214>
 8001d90:	2500      	movs	r5, #0
 8001d92:	f104 0619 	add.w	r6, r4, #25
 8001d96:	e7f5      	b.n	8001d84 <_printf_i+0x230>
 8001d98:	080020e1 	.word	0x080020e1
 8001d9c:	080020f2 	.word	0x080020f2

08001da0 <memchr>:
 8001da0:	4603      	mov	r3, r0
 8001da2:	b510      	push	{r4, lr}
 8001da4:	b2c9      	uxtb	r1, r1
 8001da6:	4402      	add	r2, r0
 8001da8:	4293      	cmp	r3, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	d101      	bne.n	8001db2 <memchr+0x12>
 8001dae:	2000      	movs	r0, #0
 8001db0:	e003      	b.n	8001dba <memchr+0x1a>
 8001db2:	7804      	ldrb	r4, [r0, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	428c      	cmp	r4, r1
 8001db8:	d1f6      	bne.n	8001da8 <memchr+0x8>
 8001dba:	bd10      	pop	{r4, pc}

08001dbc <memcpy>:
 8001dbc:	440a      	add	r2, r1
 8001dbe:	4291      	cmp	r1, r2
 8001dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001dc4:	d100      	bne.n	8001dc8 <memcpy+0xc>
 8001dc6:	4770      	bx	lr
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dce:	4291      	cmp	r1, r2
 8001dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001dd4:	d1f9      	bne.n	8001dca <memcpy+0xe>
 8001dd6:	bd10      	pop	{r4, pc}

08001dd8 <memmove>:
 8001dd8:	4288      	cmp	r0, r1
 8001dda:	b510      	push	{r4, lr}
 8001ddc:	eb01 0402 	add.w	r4, r1, r2
 8001de0:	d902      	bls.n	8001de8 <memmove+0x10>
 8001de2:	4284      	cmp	r4, r0
 8001de4:	4623      	mov	r3, r4
 8001de6:	d807      	bhi.n	8001df8 <memmove+0x20>
 8001de8:	1e43      	subs	r3, r0, #1
 8001dea:	42a1      	cmp	r1, r4
 8001dec:	d008      	beq.n	8001e00 <memmove+0x28>
 8001dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001df6:	e7f8      	b.n	8001dea <memmove+0x12>
 8001df8:	4601      	mov	r1, r0
 8001dfa:	4402      	add	r2, r0
 8001dfc:	428a      	cmp	r2, r1
 8001dfe:	d100      	bne.n	8001e02 <memmove+0x2a>
 8001e00:	bd10      	pop	{r4, pc}
 8001e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e0a:	e7f7      	b.n	8001dfc <memmove+0x24>

08001e0c <_free_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	4605      	mov	r5, r0
 8001e10:	2900      	cmp	r1, #0
 8001e12:	d040      	beq.n	8001e96 <_free_r+0x8a>
 8001e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e18:	1f0c      	subs	r4, r1, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bfb8      	it	lt
 8001e1e:	18e4      	addlt	r4, r4, r3
 8001e20:	f000 f910 	bl	8002044 <__malloc_lock>
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <_free_r+0x8c>)
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	b933      	cbnz	r3, 8001e38 <_free_r+0x2c>
 8001e2a:	6063      	str	r3, [r4, #4]
 8001e2c:	6014      	str	r4, [r2, #0]
 8001e2e:	4628      	mov	r0, r5
 8001e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e34:	f000 b90c 	b.w	8002050 <__malloc_unlock>
 8001e38:	42a3      	cmp	r3, r4
 8001e3a:	d908      	bls.n	8001e4e <_free_r+0x42>
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	1821      	adds	r1, r4, r0
 8001e40:	428b      	cmp	r3, r1
 8001e42:	bf01      	itttt	eq
 8001e44:	6819      	ldreq	r1, [r3, #0]
 8001e46:	685b      	ldreq	r3, [r3, #4]
 8001e48:	1809      	addeq	r1, r1, r0
 8001e4a:	6021      	streq	r1, [r4, #0]
 8001e4c:	e7ed      	b.n	8001e2a <_free_r+0x1e>
 8001e4e:	461a      	mov	r2, r3
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	b10b      	cbz	r3, 8001e58 <_free_r+0x4c>
 8001e54:	42a3      	cmp	r3, r4
 8001e56:	d9fa      	bls.n	8001e4e <_free_r+0x42>
 8001e58:	6811      	ldr	r1, [r2, #0]
 8001e5a:	1850      	adds	r0, r2, r1
 8001e5c:	42a0      	cmp	r0, r4
 8001e5e:	d10b      	bne.n	8001e78 <_free_r+0x6c>
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	4401      	add	r1, r0
 8001e64:	1850      	adds	r0, r2, r1
 8001e66:	4283      	cmp	r3, r0
 8001e68:	6011      	str	r1, [r2, #0]
 8001e6a:	d1e0      	bne.n	8001e2e <_free_r+0x22>
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4401      	add	r1, r0
 8001e72:	6011      	str	r1, [r2, #0]
 8001e74:	6053      	str	r3, [r2, #4]
 8001e76:	e7da      	b.n	8001e2e <_free_r+0x22>
 8001e78:	d902      	bls.n	8001e80 <_free_r+0x74>
 8001e7a:	230c      	movs	r3, #12
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	e7d6      	b.n	8001e2e <_free_r+0x22>
 8001e80:	6820      	ldr	r0, [r4, #0]
 8001e82:	1821      	adds	r1, r4, r0
 8001e84:	428b      	cmp	r3, r1
 8001e86:	bf01      	itttt	eq
 8001e88:	6819      	ldreq	r1, [r3, #0]
 8001e8a:	685b      	ldreq	r3, [r3, #4]
 8001e8c:	1809      	addeq	r1, r1, r0
 8001e8e:	6021      	streq	r1, [r4, #0]
 8001e90:	6063      	str	r3, [r4, #4]
 8001e92:	6054      	str	r4, [r2, #4]
 8001e94:	e7cb      	b.n	8001e2e <_free_r+0x22>
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
 8001e98:	20000094 	.word	0x20000094

08001e9c <sbrk_aligned>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	4e0e      	ldr	r6, [pc, #56]	; (8001ed8 <sbrk_aligned+0x3c>)
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	6831      	ldr	r1, [r6, #0]
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	b911      	cbnz	r1, 8001eae <sbrk_aligned+0x12>
 8001ea8:	f000 f8bc 	bl	8002024 <_sbrk_r>
 8001eac:	6030      	str	r0, [r6, #0]
 8001eae:	4621      	mov	r1, r4
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f000 f8b7 	bl	8002024 <_sbrk_r>
 8001eb6:	1c43      	adds	r3, r0, #1
 8001eb8:	d00a      	beq.n	8001ed0 <sbrk_aligned+0x34>
 8001eba:	1cc4      	adds	r4, r0, #3
 8001ebc:	f024 0403 	bic.w	r4, r4, #3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	d007      	beq.n	8001ed4 <sbrk_aligned+0x38>
 8001ec4:	1a21      	subs	r1, r4, r0
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	f000 f8ac 	bl	8002024 <_sbrk_r>
 8001ecc:	3001      	adds	r0, #1
 8001ece:	d101      	bne.n	8001ed4 <sbrk_aligned+0x38>
 8001ed0:	f04f 34ff 	mov.w	r4, #4294967295
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
 8001ed8:	20000098 	.word	0x20000098

08001edc <_malloc_r>:
 8001edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee0:	1ccd      	adds	r5, r1, #3
 8001ee2:	f025 0503 	bic.w	r5, r5, #3
 8001ee6:	3508      	adds	r5, #8
 8001ee8:	2d0c      	cmp	r5, #12
 8001eea:	bf38      	it	cc
 8001eec:	250c      	movcc	r5, #12
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	4607      	mov	r7, r0
 8001ef2:	db01      	blt.n	8001ef8 <_malloc_r+0x1c>
 8001ef4:	42a9      	cmp	r1, r5
 8001ef6:	d905      	bls.n	8001f04 <_malloc_r+0x28>
 8001ef8:	230c      	movs	r3, #12
 8001efa:	2600      	movs	r6, #0
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4630      	mov	r0, r6
 8001f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f04:	4e2e      	ldr	r6, [pc, #184]	; (8001fc0 <_malloc_r+0xe4>)
 8001f06:	f000 f89d 	bl	8002044 <__malloc_lock>
 8001f0a:	6833      	ldr	r3, [r6, #0]
 8001f0c:	461c      	mov	r4, r3
 8001f0e:	bb34      	cbnz	r4, 8001f5e <_malloc_r+0x82>
 8001f10:	4629      	mov	r1, r5
 8001f12:	4638      	mov	r0, r7
 8001f14:	f7ff ffc2 	bl	8001e9c <sbrk_aligned>
 8001f18:	1c43      	adds	r3, r0, #1
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	d14d      	bne.n	8001fba <_malloc_r+0xde>
 8001f1e:	6834      	ldr	r4, [r6, #0]
 8001f20:	4626      	mov	r6, r4
 8001f22:	2e00      	cmp	r6, #0
 8001f24:	d140      	bne.n	8001fa8 <_malloc_r+0xcc>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	4631      	mov	r1, r6
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	eb04 0803 	add.w	r8, r4, r3
 8001f30:	f000 f878 	bl	8002024 <_sbrk_r>
 8001f34:	4580      	cmp	r8, r0
 8001f36:	d13a      	bne.n	8001fae <_malloc_r+0xd2>
 8001f38:	6821      	ldr	r1, [r4, #0]
 8001f3a:	3503      	adds	r5, #3
 8001f3c:	1a6d      	subs	r5, r5, r1
 8001f3e:	f025 0503 	bic.w	r5, r5, #3
 8001f42:	3508      	adds	r5, #8
 8001f44:	2d0c      	cmp	r5, #12
 8001f46:	bf38      	it	cc
 8001f48:	250c      	movcc	r5, #12
 8001f4a:	4638      	mov	r0, r7
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	f7ff ffa5 	bl	8001e9c <sbrk_aligned>
 8001f52:	3001      	adds	r0, #1
 8001f54:	d02b      	beq.n	8001fae <_malloc_r+0xd2>
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	442b      	add	r3, r5
 8001f5a:	6023      	str	r3, [r4, #0]
 8001f5c:	e00e      	b.n	8001f7c <_malloc_r+0xa0>
 8001f5e:	6822      	ldr	r2, [r4, #0]
 8001f60:	1b52      	subs	r2, r2, r5
 8001f62:	d41e      	bmi.n	8001fa2 <_malloc_r+0xc6>
 8001f64:	2a0b      	cmp	r2, #11
 8001f66:	d916      	bls.n	8001f96 <_malloc_r+0xba>
 8001f68:	1961      	adds	r1, r4, r5
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	6025      	str	r5, [r4, #0]
 8001f6e:	bf18      	it	ne
 8001f70:	6059      	strne	r1, [r3, #4]
 8001f72:	6863      	ldr	r3, [r4, #4]
 8001f74:	bf08      	it	eq
 8001f76:	6031      	streq	r1, [r6, #0]
 8001f78:	5162      	str	r2, [r4, r5]
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	f104 060b 	add.w	r6, r4, #11
 8001f82:	f000 f865 	bl	8002050 <__malloc_unlock>
 8001f86:	f026 0607 	bic.w	r6, r6, #7
 8001f8a:	1d23      	adds	r3, r4, #4
 8001f8c:	1af2      	subs	r2, r6, r3
 8001f8e:	d0b6      	beq.n	8001efe <_malloc_r+0x22>
 8001f90:	1b9b      	subs	r3, r3, r6
 8001f92:	50a3      	str	r3, [r4, r2]
 8001f94:	e7b3      	b.n	8001efe <_malloc_r+0x22>
 8001f96:	6862      	ldr	r2, [r4, #4]
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	bf0c      	ite	eq
 8001f9c:	6032      	streq	r2, [r6, #0]
 8001f9e:	605a      	strne	r2, [r3, #4]
 8001fa0:	e7ec      	b.n	8001f7c <_malloc_r+0xa0>
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	6864      	ldr	r4, [r4, #4]
 8001fa6:	e7b2      	b.n	8001f0e <_malloc_r+0x32>
 8001fa8:	4634      	mov	r4, r6
 8001faa:	6876      	ldr	r6, [r6, #4]
 8001fac:	e7b9      	b.n	8001f22 <_malloc_r+0x46>
 8001fae:	230c      	movs	r3, #12
 8001fb0:	4638      	mov	r0, r7
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	f000 f84c 	bl	8002050 <__malloc_unlock>
 8001fb8:	e7a1      	b.n	8001efe <_malloc_r+0x22>
 8001fba:	6025      	str	r5, [r4, #0]
 8001fbc:	e7de      	b.n	8001f7c <_malloc_r+0xa0>
 8001fbe:	bf00      	nop
 8001fc0:	20000094 	.word	0x20000094

08001fc4 <_realloc_r>:
 8001fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc8:	4680      	mov	r8, r0
 8001fca:	4614      	mov	r4, r2
 8001fcc:	460e      	mov	r6, r1
 8001fce:	b921      	cbnz	r1, 8001fda <_realloc_r+0x16>
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd6:	f7ff bf81 	b.w	8001edc <_malloc_r>
 8001fda:	b92a      	cbnz	r2, 8001fe8 <_realloc_r+0x24>
 8001fdc:	f7ff ff16 	bl	8001e0c <_free_r>
 8001fe0:	4625      	mov	r5, r4
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe8:	f000 f838 	bl	800205c <_malloc_usable_size_r>
 8001fec:	4284      	cmp	r4, r0
 8001fee:	4607      	mov	r7, r0
 8001ff0:	d802      	bhi.n	8001ff8 <_realloc_r+0x34>
 8001ff2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001ff6:	d812      	bhi.n	800201e <_realloc_r+0x5a>
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	4640      	mov	r0, r8
 8001ffc:	f7ff ff6e 	bl	8001edc <_malloc_r>
 8002000:	4605      	mov	r5, r0
 8002002:	2800      	cmp	r0, #0
 8002004:	d0ed      	beq.n	8001fe2 <_realloc_r+0x1e>
 8002006:	42bc      	cmp	r4, r7
 8002008:	4622      	mov	r2, r4
 800200a:	4631      	mov	r1, r6
 800200c:	bf28      	it	cs
 800200e:	463a      	movcs	r2, r7
 8002010:	f7ff fed4 	bl	8001dbc <memcpy>
 8002014:	4631      	mov	r1, r6
 8002016:	4640      	mov	r0, r8
 8002018:	f7ff fef8 	bl	8001e0c <_free_r>
 800201c:	e7e1      	b.n	8001fe2 <_realloc_r+0x1e>
 800201e:	4635      	mov	r5, r6
 8002020:	e7df      	b.n	8001fe2 <_realloc_r+0x1e>
	...

08002024 <_sbrk_r>:
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	2300      	movs	r3, #0
 8002028:	4d05      	ldr	r5, [pc, #20]	; (8002040 <_sbrk_r+0x1c>)
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	602b      	str	r3, [r5, #0]
 8002030:	f7fe fc12 	bl	8000858 <_sbrk>
 8002034:	1c43      	adds	r3, r0, #1
 8002036:	d102      	bne.n	800203e <_sbrk_r+0x1a>
 8002038:	682b      	ldr	r3, [r5, #0]
 800203a:	b103      	cbz	r3, 800203e <_sbrk_r+0x1a>
 800203c:	6023      	str	r3, [r4, #0]
 800203e:	bd38      	pop	{r3, r4, r5, pc}
 8002040:	2000009c 	.word	0x2000009c

08002044 <__malloc_lock>:
 8002044:	4801      	ldr	r0, [pc, #4]	; (800204c <__malloc_lock+0x8>)
 8002046:	f000 b811 	b.w	800206c <__retarget_lock_acquire_recursive>
 800204a:	bf00      	nop
 800204c:	200000a0 	.word	0x200000a0

08002050 <__malloc_unlock>:
 8002050:	4801      	ldr	r0, [pc, #4]	; (8002058 <__malloc_unlock+0x8>)
 8002052:	f000 b80c 	b.w	800206e <__retarget_lock_release_recursive>
 8002056:	bf00      	nop
 8002058:	200000a0 	.word	0x200000a0

0800205c <_malloc_usable_size_r>:
 800205c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002060:	1f18      	subs	r0, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	bfbc      	itt	lt
 8002066:	580b      	ldrlt	r3, [r1, r0]
 8002068:	18c0      	addlt	r0, r0, r3
 800206a:	4770      	bx	lr

0800206c <__retarget_lock_acquire_recursive>:
 800206c:	4770      	bx	lr

0800206e <__retarget_lock_release_recursive>:
 800206e:	4770      	bx	lr

08002070 <_init>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr

0800207c <_fini>:
 800207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207e:	bf00      	nop
 8002080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002082:	bc08      	pop	{r3}
 8002084:	469e      	mov	lr, r3
 8002086:	4770      	bx	lr
